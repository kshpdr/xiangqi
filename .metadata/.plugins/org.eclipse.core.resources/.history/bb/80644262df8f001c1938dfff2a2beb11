package de.tuberlin.sese.swtpp.gameserver.model.xiangqi;

import de.tuberlin.sese.swtpp.gameserver.model.*;
//TODO: more imports from JVM allowed here


import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;

public class XiangqiGame extends Game implements Serializable{

	/**
	 *
	 */
	private static final long serialVersionUID = 5424778147226994452L;

	/************************
	 * member
	 ***********************/

	// just for better comprehensibility of the code: assign red and black player
	private Player blackPlayer;
	private Player redPlayer;

	// internal representation of the game state
	// TODO: insert additional game data here
	private Board board = new Board("rheagaehr/9/1c5c1/s1s1s1s1s/9/9/S1S1S1S1S/1C5C1/9/RHEAGAEHR");

	/************************
	 * constructors
	 ***********************/

	public XiangqiGame() {
		super();

		// TODO: initialization of game state can go here
	}

	public String getType() {
		return "xiangqi";
	}

	/*******************************************
	 * Game class functions already implemented
	 ******************************************/

	@Override
	public boolean addPlayer(Player player) {
		if (!started) {
			players.add(player);

			// game starts with two players
			if (players.size() == 2) {
				started = true;
				this.redPlayer = players.get(0);
				this.blackPlayer= players.get(1);
				nextPlayer = redPlayer;
			}
			return true;
		}

		return false;
	}

	@Override
	public String getStatus() {
		if (error)
			return "Error";
		if (!started)
			return "Wait";
		if (!finished)
			return "Started";
		if (surrendered)
			return "Surrendered";
		if (draw)
			return "Draw";

		return "Finished";
	}

	@Override
	public String gameInfo() {
		String gameInfo = "";

		if (started) {
			if (blackGaveUp())
				gameInfo = "black gave up";
			else if (redGaveUp())
				gameInfo = "red gave up";
			else if (didRedDraw() && !didBlackDraw())
				gameInfo = "red called draw";
			else if (!didRedDraw() && didBlackDraw())
				gameInfo = "black called draw";
			else if (draw)
				gameInfo = "draw game";
			else if (finished)
				gameInfo = blackPlayer.isWinner() ? "black won" : "red won";
		}

		return gameInfo;
	}

	@Override
	public String nextPlayerString() {
		return isRedNext() ? "r" : "b";
	}

	@Override
	public int getMinPlayers() {
		return 2;
	}

	@Override
	public int getMaxPlayers() {
		return 2;
	}

	@Override
	public boolean callDraw(Player player) {

		// save to status: player wants to call draw
		if (this.started && !this.finished) {
			player.requestDraw();
		} else {
			return false;
		}

		// if both agreed on draw:
		// game is over
		if (players.stream().allMatch(Player::requestedDraw)) {
			this.draw = true;
			finish();
		}
		return true;
	}

	@Override
	public boolean giveUp(Player player) {
		if (started && !finished) {
			if (this.redPlayer == player) {
				redPlayer.surrender();
				blackPlayer.setWinner();
			}
			if (this.blackPlayer == player) {
				blackPlayer.surrender();
				redPlayer.setWinner();
			}
			surrendered = true;
			finish();

			return true;
		}

		return false;
	}

	/* ******************************************
	 * Helpful stuff
	 ***************************************** */

	/**
	 *
	 * @return True if it's red player's turn
	 */
	public boolean isRedNext() {
		return nextPlayer == redPlayer;
	}

	/**
	 * Ends game after regular move (save winner, finish up game state,
	 * histories...)
	 *
	 * @param winner player who won the game
	 * @return true if game was indeed finished
	 */
	public boolean regularGameEnd(Player winner) {
		// public for tests
		if (finish()) {
			winner.setWinner();
			winner.getUser().updateStatistics();
			return true;
		}
		return false;
	}

	public boolean didRedDraw() {
		return redPlayer.requestedDraw();
	}

	public boolean didBlackDraw() {
		return blackPlayer.requestedDraw();
	}

	public boolean redGaveUp() {
		return redPlayer.surrendered();
	}

	public boolean blackGaveUp() {
		return blackPlayer.surrendered();
	}

	/*******************************************
	 * !!!!!!!!! To be implemented !!!!!!!!!!!!
	 ******************************************/

	@Override
	public void setBoard(String state) {
		// Note: This method is for automatic testing. A regular game would not start at some artificial state.
		//       It can be assumed that the state supplied is a regular board that can be reached during a game.
		// TODO: implement
		board = new Board(state);
	}

	@Override
	public String getBoard() {
		// TODO: implement
		return board.getBoardState();
	}

	@Override
	public boolean tryMove(String moveString, Player player) {
		// TODO: implement
		Move move = new Move(moveString, board.getBoardState(), player);
		
		String currentMove = moveString.split("-")[0];
		String wantedMove = moveString.split("-")[1];
		
		//check whether format of move is correct
		if (!moveString.matches("[gaehrcsGAEHRCS]\\d-[gaehrcsGAEHRCS]\\d")) {
			return false;
		}
		
		//check whether correct player does a move
		if ((isRedNext() && (player != redPlayer)) || ((!isRedNext()) && (player != blackPlayer)))  {
			return false;
		}
		
		// check whether a figure itself moved
		if (currentMove.charAt(0) != wantedMove.charAt(0)) {
			return false;
		}
			
		// in the end of the game turn the side
		if (player == redPlayer) {
			nextPlayer = blackPlayer;
		}
		else {
			nextPlayer = redPlayer;
		}
		
		return true;
	}
	
	public static Position stringToPosition(String positionString) {
		int row = positionString.charAt(1) - '0';
		int column = positionString.charAt(0) - 97;
		return new Position(row, column);
	}
	
	public static void main(String[] args) {
		//System.out.print(stringToPosition("c1").getRow());
		//System.out.print(stringToPosition("c1").getColumn());
		
		Rook rook = new Rook(new Position(7, 0));
		Cannon cannon = new Cannon(new Position(6, 7));
		Soldier soldier = new Soldier(new Position(6, 2));
		Board board = new Board("r2a1aeCr/9/e1h2g1c1/s1s5s/2S4s1/S8/7sS/1C4H2/4A4/1RE1GAE1R");
		Player redPlayer = new Player(new User("Denis", "5"), new XiangqiGame());
		Player blackPlayer = new Player(new User("Daniil", "6"), new XiangqiGame());
		
		Board board1 = new Board("rheagaehr/9/1c5c1/s1s1s1s1s/9/9/S1S1S1S1S/1C5C1/9/RHEAGAEHR"); // start position
		Rook rook1 = new Rook(new Position(8, 0));
		if (board1.getFigures().contains(rook)) {
			boolean a = true;
		}
		else {
			boolean a = false;
		}
		
//		ArrayList<Move> rookMoves = rook.getPossibleMoves(new Position(0, 8), board, blackPlayer);
//		ArrayList<Move> cannonMoves = cannon.getPossibleMoves(new Position(0, 7), board, redPlayer);
//		ArrayList<Move> soldierMoves = soldier.getPossibleMoves(new Position(4, 2), board, redPlayer);

		
//		System.out.println("Moves for Rook: ");
//		for (Move move : rookMoves) {
//			System.out.println(move.getMove());
//		}
//		
//		
//		System.out.println("Moves for Cannon: ");
//		for (Move move : cannonMoves) {
//			System.out.println(move.getMove());
//		}
//		
//		System.out.println("Moves for Soldier: ");
//		for (Move move : soldierMoves) {
//			System.out.println(move.getMove());
//		}
	}

}
