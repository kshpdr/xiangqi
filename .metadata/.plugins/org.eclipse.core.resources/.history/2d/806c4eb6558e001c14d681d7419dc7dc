package de.tuberlin.sese.swtpp.gameserver.model.xiangqi;

import java.util.ArrayList;

import de.tuberlin.sese.swtpp.gameserver.model.Move;
import de.tuberlin.sese.swtpp.gameserver.model.Player;

public class Soldier implements Figur {
	Position position;
	
	public Soldier(Position position) {
		this.position = position;
	}

	@Override
	public ArrayList<Move> getPossibleMoves(Position position, Board board, Player player) {
		// TODO Auto-generated method stub
		ArrayList<Move> possibleMoves = new ArrayList<Move>();
		char[][] boardMatrix = board.getCurrentBoard();
		General friendGeneral = board.getFriendGeneral(position);
		General enemyGeneral = board.getEnemyGeneral(position);
		boolean redNext;
		boolean isRiverCrossed = isRiverCrossed(position, board);
		
		
		// specify friend and enemy generals
		if (Character.isLowerCase(boardMatrix[position.getRow()][position.getColumn()])) {
			redNext = false;
			friendGeneral = board.getBlackGeneral();
			enemyGeneral = board.getRedGeneral();
		}
		else {
			redNext = true;
			enemyGeneral = board.getBlackGeneral();
			friendGeneral = board.getRedGeneral();	
		}
		
		// forwards vertical
				for (int i = position.getRow() - 1; i >= 0; i--) {
					Position target = new Position(i, position.getColumn());
					String move = createMoveFromPositions(position, target);
					
					// check whether other friendly figures on the way: if so, break.
					if ((redNext && Character.toString(boardMatrix[i][position.getColumn()]).matches("[GAEHRCS]")) || (!redNext && Character.toString(boardMatrix[i][position.getColumn()]).matches("[gaehrcs]"))){
						break; // stop after first friendly figure found on the way
					}			
					
					// check whether general is threatened
					//if (!friendGeneral.isThreatened(move)) {
					if (true) {
						possibleMoves.add(new Move(move, board.getBoardState(), player));
					}
				}
	}
	
	public boolean isRiverCrossed (Position position, Board board) {
		char[][] boardMatrix = board.getCurrentBoard();
		if (Character.isLowerCase(boardMatrix[position.getRow()][position.getColumn()])){
			if (position.getRow() >= 5) {
				return true;
			}
			else {
				return false;
			}
		}
		else {
			if (position.getRow() <= 4) {
				return true;
			}
			else {
				return false;
			}
		}
	}

	public String createMoveFromPositions(Position currentPosition, Position targetPosition) {
		String move = Position.positionToString(currentPosition);
		move += '-';
		move += Position.positionToString(targetPosition);
		return move;
	}
}
